# -*- coding: utf-8 -*-
"""11. 내장 함수.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jcHksyxBvdBG5gq73MjGW-p5LEZC1d6t
"""

# 문자열 내장함수

# chr(): 유니코드 -> 문자
print(chr(97))

# ord(): 문자 -> 유니코드
print(ord('T'))

password = "test1234"
for i in password:
    print(chr(ord(i) * 99), end='')

# str()
# format()
print(format(10000000, ','))
print(format(10000000, '_'))

# eval(): 실행하고자 하는 표현식(expression)을 문자열로 전달하면 결과를 반환
print("10 * 2")
print(eval("10 * 2"))

# 숫자의 내장함수
# abs() : 전달된 인수(정수 또는 실수)의 절대값을 반환
print(abs(-15))
print(abs(3.3))

# divmod(값1, 값2): 몫과 나머지를 한 쌍으로 반환
print(10 // 3)
print(10 % 3)
print(divmod(10, 3))

# float(), int(), max(), min(), sum()
# round() : 전달된 인수를 이용해 반올림한 값을 반환
print(round(1.518111, 2))
print(round(2.6))

print(round(2.5))
print(round(3.5))
# 일반적인 반올림은 사사오입이지만 파이썬에서는 오사오입을 한다.

# 프로그래밍의 한계 : 실수의 오류
print(10/3)

# 시퀀스 내장함수
# enumerate()
li1 = [i * 10 for i in range(1, 11)]
print(li1)

for idx, value in enumerate(li1):
    print(idx, value)

# zip()
names = ['김철수', '김영희', '흰둥이', '신짱구']
scores = [100, 60, 5, 85]

for name, score in zip(names, scores):
    print(f"{name}의 시험점수: {score}점")

# sorted()
sorted(names)

# 문자열의 메서드
# .count(찾을 값) : 문자열 내부에서 특정 문자의 개수를 반환
str1 = "apple"
print(str1.count('p'))
print('p' in str1)

# .find(찾을 값) : 문자열 내부에 특정 문자의 인덱스를 반환
# 만약 값이 여러 개라면 먼저 만나는 인덱스를 반환
print(str1.find('p'))

# .upper(), lower()
# .capitalize() : 앞문자 대문자로 변경
print("japan".capitalize())

# .join(): 반복 가능한 객체를 연결한 결과를 반환
li2 = ['가', '나', '다', '마']
print(" ".join(li2))

# li3 = [10, 20, 30, 40] 정수는 오류
# print("".join(li3))

# .split(구분자)
print("010-7788-1122".split('-'))
print("".join("010-7788-1122".split("-")))

# .replace(찾을 값, 대체 값)
print("홍길동".replace('홍', '김'))

# isdigit() : 정수가 있는지 확인
# isalpha() : 알파벳이 있는지 확인
num = input("정수를 입력하세요")

if num.isdigit():
    print("정수입니다.")
else:
    print("정수가 아닙니다.")

# .strip() : 공백제거
# .lstrip() : 왼쪽 공백제거
# .rstrip() : 오른쪽 공백제거

print("                    10점".strip())