# -*- coding: utf-8 -*-
"""14. 콜백함수(callback, lambda).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EagSdwZ-2KAi3-G-wySfOzuQ5ipfrxtl

# 콜백함수(callback)
    - 다른 함수가 실행을 끝낸 뒤 실행 수의 callback되는 함수를 의미하며,
      함수의 실행 결과를 받아 처리하기 위해 사용되는 익명함수 이다.
"""

# 두 수를 더해서 출력하는 함수
def sum(num1, num2, callback):
    return callback(num1 + num2)

def add(result):
    return result + 10

sum(10, 20, print)

print(sum(10, 20, add))

# 성과 이름을 받아서 출력하는 함수
def get_fullname(first_name, last_name, callback):
    callback(first_name + last_name)

get_fullname("홍", "길동", print)

# 이름을 다섯 번 출력하는 함수
def repeat_five_times(name, callback):
    for i in range(5):
        callback(name)

repeat_five_times("홍길동", print)

# 값을 전달받으면 2제곱 후 출력
# (함수, 콜백함수)
def get_square(num, callback):
    callback(num * num)
    callback(num ** 2)

get_square(10, print)
get_square(25, print)

"""# 람다 함수
- 단일문으로 표현되는 익명함수이며, 코드상에서 한 번만 사용되는 기능이 있을 때 또는 굳이 함수를 만들지 않고 일회성으로 사용될 때 사용하는 문법이다.
- 람다식은 return 키워드가 없기 때문에 모든 값이 return되며, return키워드가 필요하다면 일반 함수로 작성 해야 한다.

- 람다함수
- lambda    변수명:    실행로직
- lambda    x:         x * 3
- [예약어]  [매개변수]    [함수 선언부]

pow = lambda x : x ** 3
pow(3)

- 람다의 즉시 사용: ()()
(lambda x: x ** 3)(10)
"""

# 두 수를 더해서 출력하는 람다함수
result = (lambda x, y: x + y)(10, 20)

# 즉시 실행
(lambda x, y, callback: callback(x + y))(10, 20, print)

multiple = lambda num1, num2: num1 * num2
print(multiple(10, 20))

"""#filter 함수
- 특정 조건을 만족하는 요소만 남기고 필터링하여 결과를 얻는 함수
"""

li1 = [i + 1 for i in range(0, 20)]
print(li1)

print(filter(lambda n: n % 3 == 0, li1))
print(list(filter(lambda n: n % 3 == 0, li1)))

# 1~50까지 list에 담고, 20~30까지 값을 filter로 걸러낸 후 list로 출력하기
li2 = [i + 1 for i in range(0, 50)]
# print(li2)

print(list(filter(lambda n: n <= 30 and n >= 20, li2)))
print(list(filter(lambda n: 20 <= n <= 30, li2)))

"""# map()
- 각 원소를 주어진 수식에 따라 변형하여 새로운 값을 반환하는 함수
"""

li3 = [i for i in range(1, 20)]
print(li3)

print(list(map(lambda n: n + 100, li3)))

# 1~50까지 리스트에 담고, 홀수만 필터링 한 후
# 그 결과에 모두 5를 더해서 리스트로 출력
# filter(), map()

li4 = [i + 1 for i in range(0, 50)]

# print(list(map(lambda n: n + 5, filter(lambda n: n % 2 == 1, li4))))

print(list(map(lambda n : n + 5, list(filter(lambda n: n % 2 == 1, li4)))))